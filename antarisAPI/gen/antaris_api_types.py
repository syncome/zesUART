###########################################################################
#
#  ==================== COPYRIGHT NOTICE ==================

#  Use of this software is governed by the terms of the Antaris 

#  SDK License Agreement entered into between Antaris and you or 

#  your employer. You may only use this software as permitted in that

#  agreement. If you or your employer has not entered into the 

#  Antaris SDK License Agreement, you are not permitted to use this software.

#  ==================== ================ ==================

#  

#  Copyright: Copyright Antaris 2022. All rights reserved.

#  This is an autogenerated file. Any changes made to this file would likely be over-written at build time.

#  Generated-From: antaris_api.xml

#  Version: 0.0.1

#
###########################################################################



# >>>> Data Types <<<<<

# ENUM: AntarisReturnCode - Api return codes
class AntarisReturnCode:
    An_GENERIC_FAILURE = -1 # Generic failure
    An_SUCCESS = 0 # Success


## @class: ReqRegisterParams
## @brief: Request parameters for registering with Payload Controller
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: health_check_fail_action                        :    Action to be taken by PC on application health check failure
class ReqRegisterParams:
    def __init__(self, correlation_id, health_check_fail_action):
        self.correlation_id = correlation_id
        self.health_check_fail_action = health_check_fail_action

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("health_check_fail_action")
        print(self.health_check_fail_action)


## @class: RespRegisterParams
## @brief: Response parameters following registration with Payload Controller
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of registration request                  
## @param: auth_token                                      :    auth-token to be used in case secure communication had been requested for while registering
class RespRegisterParams:
    def __init__(self, correlation_id, req_status, auth_token):
        self.correlation_id = correlation_id
        self.req_status = req_status
        self.auth_token = auth_token

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("req_status")
        print(self.req_status)
        print("auth_token")
        print(self.auth_token)


## @class: ReqPointToTargetParams
## @brief: Request parameters for Target Pointing Flight Service
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: longitude                                       :    Latitude for pointing                           
## @param: latitude                                        :    Longitude for pointing                          
## @param: altitude                                        :    Altitude for pointing                           
## @param: minutes                                         :    Expected duration for complete (minutes component)
## @param: seconds                                         :    Expected duration for complete (seconds component)
## @param: milliseconds                                    :    Expected duration for complete (milliseconds component)
class ReqPointToTargetParams:
    def __init__(self, correlation_id, longitude, latitude, altitude, minutes, seconds, milliseconds):
        self.correlation_id = correlation_id
        self.longitude = longitude
        self.latitude = latitude
        self.altitude = altitude
        self.minutes = minutes
        self.seconds = seconds
        self.milliseconds = milliseconds

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("longitude")
        print(self.longitude)
        print("latitude")
        print(self.latitude)
        print("altitude")
        print(self.altitude)
        print("minutes")
        print(self.minutes)
        print("seconds")
        print(self.seconds)
        print("milliseconds")
        print(self.milliseconds)


## @class: RespPointToTargetParams
## @brief: Response parameters for Pointing Flight Service callback
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of pointing request                      
class RespPointToTargetParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("req_status")
        print(self.req_status)


## @class: RespGetCurrentLocationParams
## @brief: Response parameters for Get Location Flight Service
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-location request                  
## @param: longitude                                       :    current latitude                                
## @param: latitude                                        :    current longitude                               
## @param: altitude                                        :    current altitude                                
class RespGetCurrentLocationParams:
    def __init__(self, correlation_id, req_status, longitude, latitude, altitude):
        self.correlation_id = correlation_id
        self.req_status = req_status
        self.longitude = longitude
        self.latitude = latitude
        self.altitude = altitude

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("req_status")
        print(self.req_status)
        print("longitude")
        print(self.longitude)
        print("latitude")
        print(self.latitude)
        print("altitude")
        print(self.altitude)


## @class: RespGetCurrentTimeParams
## @brief: Response parameters for Get Current Time Flight Service
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-time request                      
## @param: epoch_time                                      :    current time, seconds since epoch               
class RespGetCurrentTimeParams:
    def __init__(self, correlation_id, req_status, epoch_time):
        self.correlation_id = correlation_id
        self.req_status = req_status
        self.epoch_time = epoch_time

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("req_status")
        print(self.req_status)
        print("epoch_time")
        print(self.epoch_time)


## @class: RespGetCurrentPowerStateParams
## @brief: Response parameters for Get Current Power-state Flight Service
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of get-power-state request               
## @param: power_state                                     :    current power state                             
class RespGetCurrentPowerStateParams:
    def __init__(self, correlation_id, req_status, power_state):
        self.correlation_id = correlation_id
        self.req_status = req_status
        self.power_state = power_state

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("req_status")
        print(self.req_status)
        print("power_state")
        print(self.power_state)


## @class: ReqDownloadFileToGSParams
## @brief: Request parameters for Downloading file to ground station
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: file_path                                       :    Path and filename in VM mapped directory (absolute or relative to mount-point)
class ReqDownloadFileToGSParams:
    def __init__(self, correlation_id, file_path):
        self.correlation_id = correlation_id
        self.file_path = file_path

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("file_path")
        print(self.file_path)


## @class: RespDownloadFileToGSParams
## @brief: Response parameters for download-file-to-gs request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of download-file-to-gs request           
class RespDownloadFileToGSParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("req_status")
        print(self.req_status)


## @class: ReqPayloadPowerControlParams
## @brief: Request parameters for Payload Power Control
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: power_operation                                 :    Power operation : Power-Off (0), Power-On (1), Power-Cycle (2)
class ReqPayloadPowerControlParams:
    def __init__(self, correlation_id, power_operation):
        self.correlation_id = correlation_id
        self.power_operation = power_operation

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("power_operation")
        print(self.power_operation)


## @class: RespPayloadPowerControlParams
## @brief: Response parameters for Payload Power Control request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: req_status                                      :    status of payload-power-control request         
class RespPayloadPowerControlParams:
    def __init__(self, correlation_id, req_status):
        self.correlation_id = correlation_id
        self.req_status = req_status

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("req_status")
        print(self.req_status)


## @class: RespHealthCheckParams
## @brief: Response parameters for Health Check request
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: application_state                               :    Application State : Good (0), Error (non-Zero)  
## @param: reqs_to_pc_in_err_cnt                           :    Number of requests to PC that faced error       
## @param: resps_to_pc_in_err_cnt                          :    Number of responses to PC that faced error      
class RespHealthCheckParams:
    def __init__(self, correlation_id, application_state, reqs_to_pc_in_err_cnt, resps_to_pc_in_err_cnt):
        self.correlation_id = correlation_id
        self.application_state = application_state
        self.reqs_to_pc_in_err_cnt = reqs_to_pc_in_err_cnt
        self.resps_to_pc_in_err_cnt = resps_to_pc_in_err_cnt

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("application_state")
        print(self.application_state)
        print("reqs_to_pc_in_err_cnt")
        print(self.reqs_to_pc_in_err_cnt)
        print("resps_to_pc_in_err_cnt")
        print(self.resps_to_pc_in_err_cnt)


## @class: StartSequenceParams
## @brief: Parameters for Start-Sequence Callback
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: sequence_id                                     :    sequence id to start executing                  
## @param: scheduled_duration                              :    No of seconds this sequence is expected to run for
class StartSequenceParams:
    def __init__(self, correlation_id, sequence_id, scheduled_duration):
        self.correlation_id = correlation_id
        self.sequence_id = sequence_id
        self.scheduled_duration = scheduled_duration

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("sequence_id")
        print(self.sequence_id)
        print("scheduled_duration")
        print(self.scheduled_duration)


## @class: ShutdownParams
## @brief: Callback parameters notifying Application of imminent shutdown
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: grace_time                                      :    grace time in seconds after which the VM will be powered down
class ShutdownParams:
    def __init__(self, correlation_id, grace_time):
        self.correlation_id = correlation_id
        self.grace_time = grace_time

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("grace_time")
        print(self.grace_time)


## @class: PassthruCmdParams
## @brief: Payload Application pass-through command parameters from Mission Control
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: passthru_cmd                                    :    application-specific opaque pass-through command as sent from mission-control
class PassthruCmdParams:
    def __init__(self, correlation_id, passthru_cmd):
        self.correlation_id = correlation_id
        self.passthru_cmd = passthru_cmd

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("passthru_cmd")
        print(self.passthru_cmd)


## @class: NewFileUploadedParams
## @brief: New-file uploaded callback from Payload Controller to Payload Application
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
## @param: file_path                                       :    Path and filename in VM mapped directory of newly uploaded file
## @param: checksum                                        :    Checksum of the file (computed by Linux command cksum)
## @param: size                                            :    Size of the file in Bytes                       
class NewFileUploadedParams:
    def __init__(self, correlation_id, file_path, checksum, size):
        self.correlation_id = correlation_id
        self.file_path = file_path
        self.checksum = checksum
        self.size = size

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)
        print("file_path")
        print(self.file_path)
        print("checksum")
        print(self.checksum)
        print("size")
        print(self.size)


## @class: HealthCheckParams
## @brief: HealthCheck message
## @param: correlation_id                                  :    correlation id for matching requests with responses and callbacks
class HealthCheckParams:
    def __init__(self, correlation_id):
        self.correlation_id = correlation_id

    def __str__(self):
        print("correlation_id")
        print(self.correlation_id)


## @class: CmdSequenceDoneParams
## @brief: Parameters for Command Sequence Done notification to Payload Controller
## @param: sequence_id                                     :    sequence id that has completed execution        
class CmdSequenceDoneParams:
    def __init__(self, sequence_id):
        self.sequence_id = sequence_id

    def __str__(self):
        print("sequence_id")
        print(self.sequence_id)


## @class: AntarisApiCallbackFuncList
## @brief: Callback-functions registration structure for channel creation
## @param: start_sequence                                  :    callback handler for start-sequence             
## @param: shutdown_app                                    :    callback handler for shutdown-app               
## @param: process_passthru_tele_cmd                       :    callback handler for pass-through tele-cmd      
## @param: process_new_file_uploaded                       :    callback handler for new-file-uploaded notification
## @param: process_health_check                            :    callback handler for health-check request from PC
## @param: process_response_register                       :    callback handler for registration response      
## @param: process_reponse_point_to_target                 :    callback handler for point-to-target response   
## @param: process_response_get_current_location           :    callback handler for current-location response  
## @param: process_response_get_current_time               :    callback handler for current-time response      
## @param: process_response_get_current_power_state        :    callback handler for current-power-state response
## @param: process_response_download_file_to_gs            :    callback handler for file-download response     
## @param: process_response_payload_power_control          :    callback handler for payload power control response
class AntarisApiCallbackFuncList:
    def __init__(self, start_sequence, shutdown_app, process_passthru_tele_cmd, process_new_file_uploaded, process_health_check, process_response_register, process_reponse_point_to_target, process_response_get_current_location, process_response_get_current_time, process_response_get_current_power_state, process_response_download_file_to_gs, process_response_payload_power_control):
        self.start_sequence = start_sequence
        self.shutdown_app = shutdown_app
        self.process_passthru_tele_cmd = process_passthru_tele_cmd
        self.process_new_file_uploaded = process_new_file_uploaded
        self.process_health_check = process_health_check
        self.process_response_register = process_response_register
        self.process_reponse_point_to_target = process_reponse_point_to_target
        self.process_response_get_current_location = process_response_get_current_location
        self.process_response_get_current_time = process_response_get_current_time
        self.process_response_get_current_power_state = process_response_get_current_power_state
        self.process_response_download_file_to_gs = process_response_download_file_to_gs
        self.process_response_payload_power_control = process_response_payload_power_control

    def __str__(self):
        print("start_sequence")
        print(self.start_sequence)
        print("shutdown_app")
        print(self.shutdown_app)
        print("process_passthru_tele_cmd")
        print(self.process_passthru_tele_cmd)
        print("process_new_file_uploaded")
        print(self.process_new_file_uploaded)
        print("process_health_check")
        print(self.process_health_check)
        print("process_response_register")
        print(self.process_response_register)
        print("process_reponse_point_to_target")
        print(self.process_reponse_point_to_target)
        print("process_response_get_current_location")
        print(self.process_response_get_current_location)
        print("process_response_get_current_time")
        print(self.process_response_get_current_time)
        print("process_response_get_current_power_state")
        print(self.process_response_get_current_power_state)
        print("process_response_download_file_to_gs")
        print(self.process_response_download_file_to_gs)
        print("process_response_payload_power_control")
        print(self.process_response_payload_power_control)


